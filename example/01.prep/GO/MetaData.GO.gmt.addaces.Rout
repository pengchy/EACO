
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> 
> library(GO.db)
Loading required package: AnnotationDbi
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: 'BiocGenerics'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from 'package:stats':

    xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, as.vector, cbind, colnames, do.call, duplicated,
    eval, evalq, get, intersect, is.unsorted, lapply, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, rank, rbind,
    rep.int, rownames, sapply, setdiff, sort, table, tapply, union,
    unique, unlist, unsplit

Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: 'Biobase'

The following objects are masked from 'package:BiocGenerics':

    conditions, conditions<-, counts, counts<-, design, design<-,
    dispTable, dispTable<-, estimateDispersions, estimateSizeFactors,
    sizeFactors, sizeFactors<-

Loading required package: GenomeInfoDb
Loading required package: DBI

There were 12 warnings (use warnings() to see them)
> 
> bp.aces <- as.list(GOBPANCESTOR)
> cc.aces <- as.list(GOCCANCESTOR)
> mf.aces <- as.list(GOMFANCESTOR)
> all.aces <- c(bp.aces,cc.aces,mf.aces)
> 
> bp.off <- as.list(GOBPOFFSPRING)
> cc.off <- as.list(GOCCOFFSPRING)
> mf.off <- as.list(GOMFOFFSPRING)
> all.off <- c(bp.off,cc.off,mf.off)
> 
> goterm <- as.list(GOTERM)
> 
> tmp <- scan("/panfs/home/kang/yangpc/bin/EnrichPipeline/EACO_r20150101/example/00.data/MetaData.GO.gmt",sep="\n",what="character")
Read 200 items
> go2g <- sapply(tmp,function(x){
+   x1 <- strsplit(x,"\t")[[1]]
+   x1[3:length(x1)]
+ })
> names(go2g) <- sapply(tmp,function(x) strsplit(x,"\t")[[1]][1])
> go2g <- go2g[intersect(names(go2g),names(goterm))]
> 
> go2g.aces <- setdiff(unique(as.character(unlist(all.aces[names(go2g)]))),names(go2g))
> go2g.aces.list <- sapply(go2g.aces,function(x){
+ 		unique(as.character(unlist(go2g[intersect(all.off[[x]],names(go2g))])))
+ })
> go2g <- c(go2g,go2g.aces.list)
> go2g <- go2g[setdiff(names(go2g),c("all","GO:0003674","GO:0008150","GO:0005575"))]
> 
> #output the gmt file
> gmt <- data.frame(GO=names(go2g),
+ 		Term=as.character(sapply(names(go2g),function(x) Term(goterm[[x]]))),
+ 		genes=as.character(sapply(go2g,function(x) paste(x,collapse="\t"))))
> write.table(gmt,file="/panfs/home/kang/yangpc/bin/EnrichPipeline/EACO_r20150101/example/01.prep//GO//MetaData.GO.gmt.addaces.gmt",col.names=FALSE,row.names=FALSE,sep="\t",quote=FALSE)
> 
> res <- c(length(go2g),length(unique(as.character(unlist(go2g)))))
> names(res) <- c("totalGenSets","totalGenNum")
> write.table(res,file="/panfs/home/kang/yangpc/bin/EnrichPipeline/EACO_r20150101/example/01.prep//GO//MetaData.GO.gmt.addaces.gmt.stat",sep="\t",quote=FALSE)
> 
> q('no')
> proc.time()
   user  system elapsed 
 42.940   0.740  44.452 
